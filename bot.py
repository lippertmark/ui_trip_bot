import logging
import asyncio
import json
from collections import defaultdict
from pathlib import Path
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.filters import Command
from config import *
from aiogram.client.session.aiohttp import AiohttpSession
session = AiohttpSession(proxy='http://proxy.server:3128')

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TASKS_FILE = Path("tasks.json")

# --- –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(level=logging.INFO)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = Bot(token=API_TOKEN, session=session)
dp = Dispatcher(storage=MemoryStorage())

# --- –ó–ê–ì–†–£–ó–ö–ê –ó–ê–î–ê–ù–ò–ô ---
def load_tasks():
    if TASKS_FILE.exists():
        with open(TASKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_tasks():
    with open(TASKS_FILE, "w", encoding="utf-8") as f:
        json.dump(TASKS, f, ensure_ascii=False, indent=2)

TASKS = load_tasks()

# --- –°–û–°–¢–û–Ø–ù–ò–Ø ---
class Submission(StatesGroup):
    choosing_task = State()

class AdminStates(StatesGroup):
    waiting_for_task_text = State()

# --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞) ---
@dp.message(Command("add_task"))
async def add_task_command(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AdminStates.waiting_for_task_text)

@dp.message(AdminStates.waiting_for_task_text)
async def receive_task_text(message: Message, state: FSMContext):
    new_task_text = message.text.strip()
    new_id = str(int(max(TASKS.keys(), default="0")) + 1)
    TASKS[new_id] = new_task_text
    save_tasks()
    await bot.send_message(chat_id=CHANNEL_ID, text=f"–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ! üß≥\n –î–µ–Ω—å {new_id}\n\n{new_task_text}")
    await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\nID: {new_id}\n–¢–µ–∫—Å—Ç: {new_task_text}")
    await state.clear()

# --- –•–†–ê–ù–ò–õ–ò–©–ï –¥–ª—è media_group ---
media_groups = defaultdict(list)
task_choices = {}

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
@dp.message(Command(commands=["start", "help"]))
async def cmd_start(message: Message, state: FSMContext):
    task_list = "\n".join([f"{k}: {v}" for k, v in TASKS.items()])
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –Ω–æ–º–µ—Ä:\n\n{task_list}")
    await state.set_state(Submission.choosing_task)

@dp.message(Submission.choosing_task)
async def task_chosen(message: Message, state: FSMContext):
    task_id = message.text.strip()
    if task_id not in TASKS:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    task_choices[message.from_user.id] = task_id
    await state.clear()
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≤—Å–µ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∞–ª—å–±–æ–º–æ–º). –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ.")

@dp.message(F.media_group_id, F.photo)
async def handle_album(message: Message):
    key = (message.chat.id, message.media_group_id)
    media_groups[key].append(message)

    await asyncio.sleep(1)  # –¥–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–±–æ—Ä –≥—Ä—É–ø–ø—ã

    if key in media_groups:
        group = sorted(media_groups.pop(key), key=lambda m: m.message_id)
        photos = [InputMediaPhoto(media=m.photo[-1].file_id) for m in group]

        caption = next((m.caption for m in group if m.caption), "(–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)")
        task_id = task_choices.get(message.from_user.id, "?")

        full_caption = (
            f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ {task_id}:</b> {TASKS.get(task_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')}\n"
            f"üë§ <b>–û—Ç–ø—Ä–∞–≤–∏–ª:</b> @{message.from_user.username or message.from_user.full_name}\n\n"
            f"üìç <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {caption}"
        )

        photos[0].caption = full_caption
        photos[0].parse_mode = ParseMode.HTML

        await bot.send_media_group(chat_id=CHANNEL_ID, media=photos)
        await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª.")

# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    async def main():
        await dp.start_polling(bot)
    asyncio.run(main())
